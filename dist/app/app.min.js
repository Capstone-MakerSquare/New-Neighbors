var details = angular.module('myApp.details', []);

details.controller('detailsController', ['Details', 'Map', function (Details, Map){
  var detail = this;
  detail.markers = [];
  detail.selectedCategory = undefined;
  detail.currentSpotsToDisplay = [];

  detail.currentNeighborhood = Details.currentNeighborhood;

  // State flags to determine active tab
  // Amenities is open by fault
  detail.tabs = [1,0,0];    //[amenities, attractions, charts]

  // console.log('detailsController says: This is where you print from:', detail.currentNeighborhood.services);

  detail.displayMarkers = function(place) {
    var icon = Map.getIcon();
    // console.log('detail.currentNeighborhood.attractions', detail.currentNeighborhood.attractions);
    // console.log('detail.currentNeighborhood.services', detail.currentNeighborhood.services);
    // console.log('details.currentSpotsToDisplay:', detail.currentSpotsToDisplay);

    //clear out current markers
    Map.clearMarkers(Details.currentMarkers);

    for (var i = 0; i < place.length; i++) {
      var coordinates = {
        latitude: place[i].geometry.location.lat,
        longitude: place[i].geometry.location.lng
      };
      var tuple = Map.dropMarker(coordinates, place[i].name, place[i], icon, 'amenities_attractions');
      //[marker, infowindow]
      detail.markers.push(tuple[0]);

      place[i].marker = tuple[0]; place[i].infowindow = tuple[1];
    }
    for (var j = 0; j < detail.markers.length; j++){
      Details.currentMarkers.push(detail.markers[j]);
    }
    // console.log("detail.displayMarkers", place)
  };


  //----------------------------------------------------------------------------------
  //to expand and collapse icons section
  detail.isCollapsed = true;
  detail.moreLess = '+ More';
  detail.expandCollapse = function() {
    if (detail.moreLess === '+ More') {
      detail.moreLess = '- Less';
    } else if (detail.moreLess === '- Less') {
      detail.moreLess = '+ More';
    }
    detail.isCollapsed = !detail.isCollapsed;
  };
  //----------------------------------------------------------------------------------


  //----------------------------------------------------------------------------------
  // populates slideshow with Instagram photos
  // Todo: dupe of main.populatePictures in mainCtrl.js?
  // Todo: Check sizes?
  detail.populatePictures = function(){
    var pictures = [];
    detail.currentNeighborhood.instagram.forEach(function (obj) {
      pictures.push([obj.image, obj.userLink]);
    });
    return pictures;
  };

  // detail.picturesArr = detail.populatePictures()

  //remove
  // console.log('detailsController says: picturesArr:', detail.picturesArr);

  //----------------------------------------------------------------------------------

  //----------------------------------------------------------------------------------
   // sets selected category on click
   detail.selectCategory = function(index) {
     // console.log("selected category fn called with index", index)
      detail.selectedCategory = index;

    // console.log(category, "attraction index:", detail.selectedAttractionCategory, "service index:", detail.selectedServiceCategory);
  };

  //----------------------------------------------------------------------------------

  //HELPERS
  //----------------------------------------------------------------------------------
   // sets current attractions to spots array for ng-repeat directive
   detail.displayAmenitiesOrAttractions = function(spotsArray) {
    // console.log('Selected Spots:', spotsArray);
    detail.currentSpotsToDisplay = spotsArray;
  };

  //----------------------------------------------------------------------------------
    // allows info window to be open and closed on click
    detail.toggleTooltip = function (spot) {
      // console.log('Tool tip toggle for spot:', spot);
      Map.toggleInfoWindow(spot.infowindow, spot.marker);
    };

  //----------------------------------------------------------------------------------
    detail.getAmenitiesIcon = function(amenity) {
      // console.log('getAmenitiesIcon says: amenity:',amenity);
      return './assets/images/Amenities/'+amenity.displayName+'.png';
    };

  //----------------------------------------------------------------------------------
    detail.getAttractionsIcon = function(attraction) {
      // console.log('getAttractionsIcon says: attraction:',attraction);
      return './assets/images/Attractions/'+attraction.displayName+'.png';
    };

  //----------------------------------------------------------------------------------
   // State flags to determine active tab on click
    detail.stateSwitch = function(currState) {
      switch(currState) {
        case 'amenities': detail.tabs = [1,0,0];
                          break;
        case 'attractions': detail.tabs = [0,1,0];
                            break;
        case 'charts': detail.tabs = [0,0,1];
                           break;
        default: break;
      }
      // console.log('stateSwitch says:',detail.tabs);
    };
}]);

var mapMod = angular.module('myApp.map',[]);

mapMod.directive('map', ['Map', '$scope', function (Map, $scope) {

  var link = function(scope) {
    var centerUS = {
      latitude: 38.5,
      longitude: -96
    };
    Map.initialize(centerUS);
    Map.panAndFocusDestination(Map.targetLocation);
    setTimeout(function () { $scope.$apply(); }, 500);
  }

  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'app/map/mapTemplate.html',
    controller: 'MainController',
    controllerAs: 'main',
    scope: false,
    link: link  //'link' is a keyword that invokes once the directive is done loading
  };
}]);


var searchForm = angular.module('myApp.searchForm', []);
searchForm.directive('searchform', [function() {

  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'app/searchForm/searchFormTemplate.html'
  };
}]);

var filter = angular.module('myApp.filter', []);
filter.directive('filters', [function() {

  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'app/filter/filterTemplate.html'
  };
}]);
var thumbnails = angular.module('myApp.thumbnails', []);
thumbnails.directive('thumbnail', [function() {

  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'app/thumbnails/thumbnailsTemplate.html'
  };
}]);
app.controller('MainController', ['Map', 'ServerApi', '$state', 'Details', 'Charts', '$anchorScroll', '$location', '$scope', '$timeout', function (Map, ServerApi, $state, Details, Charts, $anchorScroll, $location, $scope, $timeout){

  var main = this;
  main.picturesArr = [];
  main.isCollapsed = false;
  main.neighborhoodsObj = {}; //this is the response from the server

  main.searchInfo = {}; // JSON obj to send to server
  main.searchInfo.address = '';
  main.searchInfo.buyOrRent = 'rent';
  main.searchInfo.bedrooms = '1';
  main.searchInfo.bathrooms = '1';

  main.filter = {}; //object to collect filter specific information
  main.filter.maxRent = 8000;
  main.filter.commuteTime = 45;
  main.filter.commuteDistance = 30;

  main.filter.maxBuy = 5000000;

  main.filteredNeighborhoodArray = [];
  main.serverResponse = {};
  main.filterType = 'estimateLow';
  main.currentNeighborhood = { name: 'default' };
  main.loading = false;

  main.serviceObj = {};
  main.attractionObj = {};

  main.coordinates = {
      latitude: 38.5,
      longitude: -98.5
  };

  let apprxApartmentSqft = {  // data from http://www.rentcafe.com/blog/rental-market/us-average-apartment-size-trends-downward/ , etc.
    1: 750,
    2: 1100,
    3: 1300,
    4: 1500,
    5: 1700,
    8: 550,  // stand-in for studio
  }

  let rentEstimateLowFactor = 0.8;  // seems about right.  If an average 1-bedroom is 1500, a cheap one in the area might be 1200 & a super pricy one 2250
  let rentEstimateHighFactor = 1.5;

  main.priceRange = '';      //stores the current price range for the selected neighborhood
  main.buyPrice = {};

  //unscoped local variables
  var autocomplete;


  //----------------------------------------------------------------------------------
  // Function to aquire apartment price estimates by multiplying rent per sqft by typical size of apartments with given # of bedrooms
  // Input: apartment size, in bedroom # or studio, price to sqft ratio for that locale
  // Output: flattened array of objects
  let getApartmentPrice = function(size, PriceRatio) {
    return apprxApartmentSqft.size * PriceRatio;
  }

  //----------------------------------------------------------------------------------
  // Function to flatten the object so that the array can be sorted by a parameter
  // Input: neighborhoodsObj
  // Output: flattened array of objects
  main.formatPriceString = function (neighborhood) {
    let priceTitleObj = {
      title: main.buyPrice[neighborhood.name].housetype
    }

    if(main.searchInfo.buyOrRent === 'rent' && neighborhood.estimateLow != 'Not Available') {
      priceTitleObj.price = '$' + neighborhood.estimateLow.toLocaleString() + ' - ' + '$' + neighborhood.estimateHigh.toLocaleString();
    } else {
      priceTitleObj.price = (main.searchInfo.buyOrRent === 'buy') ? main.buyPrice[neighborhood.name].priceStr : 'Not Available';
    }
    return priceTitleObj;
  };

  main.orderPrice = function(hood) {
    if (hood.priceEstimate) {
      return main.buyPrice[hood.name].priceNum;
    }
  };

  main.orderByArray = function(neighborhoods){
    let arr = [];
    let highEst = 'Not Available';
    let lowEst = 'Not Available';
    for (var i = 0; i < neighborhoods.length; i++) {
      let hoodObj = {};
      if(neighborhoods[i].name==='Downtown') {
        neighborhoods[i].name = neighborhoods[i].name + ' ' + neighborhoods[i].city;
      }
      if (main.searchInfo.buyOrRent === 'rent' && neighborhoods[i].priceEstimate) {
        lowEst = neighborhoods[i].priceEstimate * apprxApartmentSqft[main.searchInfo.bedrooms] * rentEstimateLowFactor;
        highEst = neighborhoods[i].priceEstimate * apprxApartmentSqft[main.searchInfo.bedrooms] * rentEstimateHighFactor;
      }

      hoodObj = {
          name: neighborhoods[i].name,
          commuteTime: (neighborhoods[i].commuteInfo && neighborhoods[i].commuteInfo.commuteTime) ? neighborhoods[i].commuteInfo.commuteTime : 'Not Available',
          commuteDistance: (neighborhoods[i].commuteInfo && neighborhoods[i].commuteInfo.commuteDistance) ? neighborhoods[i].commuteInfo.commuteDistance : 'Not Available',
          estimateLow: lowEst,
          estimateHigh: highEst,
          googlePics: neighborhoods[i].googlePics,
          coordinates: {latitude: neighborhoods[i].latitude, longitude: neighborhoods[i].longitude},
          demography: neighborhoods[i].demographics,
          zip: neighborhoods[i].zip,
      }
      hoodObj.priceString = main.formatPriceString(hoodObj);
      hoodObj.orderPrice = main.orderPrice(neighborhoods[i]);

      arr.push(hoodObj);
    }
    return arr;
  };

  //Function to format the purchase prices for homes
  main.formatBuyPrice  = function(hoodArr) {
    let priceData;
    let dataInfo;
    let temp = {};
    let heading = (main.searchInfo.buyOrRent === 'rent') ? 'Rent' : 'House Price';
    let dwelling = (main.searchInfo.buyOrRent === 'rent') ? 'Rental' : 'House';

    hoodArr.forEach(function(hood) {
      priceData = {};
      dataInfo = [,];
      temp = {
        housetype: heading + ' Estimate',
        priceNum: hood.priceEstimate || 4000000,
        priceStr: hood.priceEstimate ? '$' + hood.priceEstimate.toLocaleString() : 'Data Not Available',
      };

      if (main.searchInfo.buyOrRent === 'rent' && !hood.priceEstimate) {
        temp.priceNum = main.filter.maxRent;
      }

      if (main.searchInfo.bedrooms < 4) {
        temp.housetype = main.searchInfo.bedrooms + '-Bedroom ' + heading + ' Estimate';
      } else if (main.searchInfo.bedrooms === '5') {
        temp.housetype = '5+-Bedroom ' + heading + ' Estimate';
      } else if (main.searchInfo.bedrooms === '6') {
        temp.housetype = 'Median Sale Price';
      } else if (main.searchInfo.bedrooms === '7') {
        temp.housetype = 'Condominium Estimate';
      } else if (main.searchInfo.bedrooms === '8') {
        temp.housetype = 'Studio ' + heading  + ' Estimate';
      }
      main.buyPrice[hood.name] = temp;
    });
  }

  //Function to set the selected type of housing to 'rent'
  main.setValueRent = function() {
    main.searchInfo.buyOrRent = 'rent';
  };

  //Function to set the selected type of housing to 'buy'
  main.setValueBuy = function() {
    main.searchInfo.buyOrRent = 'buy';
  };


  //----------------------------------------------------------------------------------
  //Function to set up autocomplete feature for the search field
  main.autoCompleteInit = function () {
    var input = document.getElementById('place-search');
    var options = { types: [] };   // Todo: limit to [geocode] per https://developers.google.com/maps/documentation/javascript/places-autocomplete ?
    autocomplete = new google.maps.places.Autocomplete(input, options);

    //listener to listen to a place change
    autocomplete.addListener('place_changed', function() {
      var place = autocomplete.getPlace();
      // console.log('mainCtrl.js says: Place changed. Place:',place);
      if(main.searchInfo.address.length > 0 || place.formatted_address) {
        main.searchInfo.address = place.formatted_address || main.searchInfo.address;
      }
    });
  };

  //----------------------------------------------------------------------------------
  //Function to fetch address and validate it
  main.submitAddress = function() {
    // $state.go('main.results');
    main.loading = true;
    main.filteredNeighborhoodArray = [];
    requestNeighborhoods();
    Map.panAndFocusDestination(main.searchInfo.address);
    Charts.clearCharts();
  };

  //Rerouters
  main.getResults = function() {
    $state.go('main.results');
  }
  main.gotoLanding = function() {
    $state.go('landing');
  }

  //----------------------------------------------------------------------------------
  // Function to make an API request for neighborhoods
  var requestNeighborhoods = function() {
    ServerApi.submit(main.searchInfo, "Neighborhoods")
    .then(function(data) {
      main.loading = false;
      main.serverResponse = data;
      main.neighborhoods = Object.keys(data).map(function(key) { return data[key]; });  //converts object of objects to array of objects

      //remove
      // console.log('requestNeighborhoods says: main.neighborhoods:',main.neighborhoods);
      
      // turned off until fully implemented
      let zipArr = Details.createZipArray(main.neighborhoods)
      main.getDemography(zipArr);

      main.attractionObj = Details.createPlacesObj(main.neighborhoods, Details.attractionDict);
      main.serviceObj = Details.createPlacesObj(main.neighborhoods, Details.serviceDict);

      //remove
      // console.log('requestNeighborhoods says: main.serviceObj:',main.serviceObj);
      
      main.formatBuyPrice(main.neighborhoods);

      main.neighborhoodArray = main.orderByArray(main.neighborhoods);
      main.filterNeighborhoods();

      main.markNeighborhoods();

      // remove
      // console.log("neighborhoodArray", main.neighborhoodArray)


    });
  };

  //----------------------------------------------------------------------------------
  // Function to filter neighborhoods by user's filter options
  main.filterNeighborhoods = function() {
    main.filteredNeighborhoodArray = main.neighborhoodArray.filter(function(obj) {
      return !(
        (main.searchInfo.buyOrRent === 'rent' && main.filter.maxRent < obj.estimateLow) ||
        (main.searchInfo.buyOrRent === 'buy' && main.filter.maxBuy < obj.orderPrice) ||
        (main.filter.communuteTime < obj.commuteTime) ||
        (main.filter.commuteDistance < obj.commuteDistance) );
    });
  };

  //----------------------------------------------------------------------------------
  // Function to filter neighborhoods by user's filter options
  main.markNeighborhoods = function() {
    for (var i = 0; i < main.neighborhoodArray.length; i++) {
      Details.neighborhoodMarkers.push(main.dropNeighborhoodMarker(main.neighborhoodArray[i].coordinates, main.neighborhoodArray[i].name, main.neighborhoodArray[i]));
    }
  };

  //----------------------------------------------------------------------------------
  //Drop a marker with a link to be clicked
  main.dropNeighborhoodMarker = function (coordinates, title, neighborhoodObj) {
    var icon = {
      url: "assets/images/Loading/housepurplewhite.png",
      size: new google.maps.Size(5.3*8, 13*8),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(10, 30),
      scaledSize: new google.maps.Size(5.3*4, 13*4)
    };

    var marker = Map.dropMarker(coordinates, title, title, icon, 'neighborhood')[0];


    marker.addListener('click', function() {
      console.log('neighborhood clicked:', neighborhoodObj);
      if(neighborhoodObj.name === main.currentNeighborhood.name) { return; }

      main.selectNeighborhood(neighborhoodObj)
      // console.log('neighborhoodObj:',neighborhoodObj);
      // console.log('main.currneigh:',main.currentNeighborhood);
    });

    return marker;
  };


  //----------------------------------------------------------------------------------
  // Function to get slow-responding Demography data from the server-->API
  main.getDemography = function(zipArr) {
    ServerApi.submit(zipArr, "Demography")
    .then(function(data) {
      main.mapDemography(data);
    });
  };


  //----------------------------------------------------------------------------------
  // Function to add Demography information back to the neighborhood Array
  main.mapDemography = function(demogArr) {
    // mark all in main
    for (let i=0;i<main.neighborhoodArray.length;i++) {
      for (let j=0;j<demogArr.length;j++) {
        if (demogArr[j].ZipCode == main.neighborhoodArray[i].zip) {
          main.neighborhoodArray[i].demography = demogArr[j];
          
          //mark current
          if (main.neighborhoodArray[i].zip == main.currentNeighborhood.zip) {
            main.currentNeighborhood.demography = demogArr[j];
            Charts.runData(main.currentNeighborhood);
          }
        }
      }
    }
  };

  //----------------------------------------------------------------------------------
  //Function to move the page

  main.goToAnchor = function(anchorId) {
    $location.hash(anchorId);
    $anchorScroll();
  };

  //----------------------------------------------------------------------------------
  // Helper functions - GOOGLE MAPS

  //----------------------------------------------------------------------------------
  //Function to initialize and draw the map, centering on the the center of the U.S.
  main.initMap = function() {
    console.log("main.initMap")
    var centerUS = {
      latitude: 38.5,
      longitude: -96
    };
    //test coordinates
    Map.initialize(centerUS);
  };

  //----------------------------------------------------------------------------------
  //Function to add a marker on the map
  main.addMarker = function (coordinates, title) {
    title = 'Test marker' || title;
    Map.dropMarker(coordinates, title);
  };

  //----------------------------------------------------------------------------------
  //Function to test new methods defined in mapService
  //remove
  main.testMap = function() {
    console.log('mainCtrl.js says: testMap called');  //make the submit button work
    // Map.panAndFocus(main.coordinates);
    // Map.dropMarker(main.coordinates);
  };

  //----------------------------------------------------------------------------------
  //Function to map neighborhood data
  main.mapCurrentNeighborhood = function (neighborhood) {
    Details.currentNeighborhood = neighborhood;
    Details.currentNeighborhood.services = main.serviceObj[neighborhood.name];
    Details.currentNeighborhood.attractions = main.attractionObj[neighborhood.name];


    for (var service in Details.currentNeighborhood.services){
      var serviceArray = Details.currentNeighborhood.services[service];
      serviceArray.forEach(function(serviceSpot) {
        if(service === 'grocery_or_supermarket') { serviceSpot.displayName = 'grocery'; }
        else { serviceSpot.displayName = service.replace("_", " ");}
      });
    }

    for (var place in Details.currentNeighborhood.attractions){
      Details.currentNeighborhood.attractions[place][0].displayName = place.replace("_", " ");
    }

    //remove
    // console.log("mapCurrentNeighborhood says: Details.currentNeighborhood:", Details.currentNeighborhood);
  }


  //----------------------------------------------------------------------------------
  //Function to drop a circle + marker on a selected neighborhood
  main.selectNeighborhood = function (neighborhood) {
    // console.log('mainCtrl.js says: selected Neighborhood: ', neighborhood);
    main.populatePictures(neighborhood);
    main.mapCurrentNeighborhood(neighborhood);

    main.priceRange = neighborhood.priceString;
    main.currentNeighborhood = neighborhood;

    // console.log('select neigh bor hood current',  main.currentNeighborhood)

    //remove
    // console.log('selectNeighborhood says: main.serverResponse:',main.serverResponse);
    // console.log('selectNeighborhood', Details.currentNeighborhood);
    Charts.runData(neighborhood);

    // Todo: remove setTimeout.  Seriously, it's not even $Timeout.

    $state.go('main.results');
    setTimeout(function() {
      $state.go('main.details.services');

      Map.panAndFocus(neighborhood.coordinates, 13);
      Map.drawCircle(neighborhood.coordinates, 2000);
    }, 200)
  };

  //----------------------------------------------------------------------------------
  // googlePics map
  main.populatePictures = function(hood){
    main.picturesArr = [];
    if (!hood.googlePics) {
      console.log("No Pictures Found");
      main.picturesArr = [];   // Todo: insert default pic here.
      return;
    }
    hood.googlePics.forEach(function (obj) {
      main.picturesArr.push([obj.image, obj.userLink]);
    });
    // console.log('detailsController says: picturesArr:', main.picturesArr);
  }


  //----------------------------------------------------------------------------------
  // Initialization functions
  main.initialize = function() {
    Map.initialize();
    main.submitAddress();
  }

  main.autoCompleteInitialize = function() {
    setTimeout(main.autoCompleteInit,100);
  }

}]);












angular.module('myApp.charts', [])

.controller('chartsController', ['$scope', 'Charts', function ($scope, Charts){

  var chart = this;
  //the display text for the Statistics view to the left of the bar chart
  chart.incomeString = 'Not Available';
  chart.sqftString = 'Not Available';
  chart.yearBuiltString = 'Not Available';

  //initializes it so that the pie and bar chart won't run unless there is information
  chart.barChart = false;
  chart.pieChart = false;

  chart.setStrings = function () {
    var demographicsObj = Charts.getDemographicsObj();
    if(Object.keys(demographicsObj).length > 0) {
      chart.incomeString = demographicsObj.incomeString || chart.incomeString;
      chart.ageString = demographicsObj.ageString || chart.ageString;
      chart.householdPopString = demographicsObj.householdPopString || chart.householdPopString;
    }
  };

  chart.setFlags = function () {
    var tuple = Charts.getFlags();    //[barchart, piechart]
    if(tuple[0]) { chart.barChart = true; }
    if(tuple[1]) { chart.pieChart = true; }
  }

  var options = {
    useEasing:true,
    useGrouping: true,
    separator:',',
    decimal:'.',
    prefix:'',
    suffix:''
  }

  chart.countup = function() {
    var flags = [1,1,1];

    if(chart.incomeString === 'Not Available') { flags[0] = 0; }
    if(chart.sqftString === 'Not Available') { flags[1] = 0; }
    if(chart.yearBuiltString === 'Not Available') { flags[2] = 0; }

    setTimeout(function() {
      if(flags[0]) {
        var c1 = new CountUp('countup1', 0, parseInt(chart.incomeString), 0, 2.5, options);
        c1.start();
      }
      if(flags[1]) {
        var c2 = new CountUp('countup2', 0, parseInt(chart.sqftString), 0, 2.5, options);
        c2.start();
      }
      if(flags[2]) {
        var yearOption = options;
        yearOption.separator = '';
        var c3 = new CountUp('countup3', 0, parseInt(chart.yearBuiltString), 0, 2.5, yearOption);
        c3.start();
      }
    }, 20);
  }

}])

// ********************************************************************************  //
// ********************************************************************************  //


.factory('Charts', function () {

  var runDrawBar = false;
  var runDrawPie = false;
  var demographicsObj = {};
  var barChartObj = {};
  var pieChartObj = {};
  var barChartArr = [[],[]];


  //----------------------------------------------------------------------------------
  // Clears Chart data before new neighborhood searches
  var clearCharts = function() {
    runDrawBar = false;
    runDrawPie = false;
    demographicsObj = {};
    barChartObj = {};
    pieChartObj = {};
    barChartArr = [[],[]];
  }

  //----------------------------------------------------------------------------------
  // Runs the data to start making the charts

  let runData = function(neighborhood){
    console.log("runData on", neighborhood.name, neighborhood);
    chartData(neighborhood);
    pieChartData(neighborhood);
    createStrings(neighborhood);
  }

  //----------------------------------------------------------------------------------
  // Compiles, validates, and maps data for a bar graph from the GeoData Demography data
  // Includes data for % of homes with children
  let childData = function(demogObj, name) {

    if (!demogObj.OccupiedHousingUnits || !demogObj.HouseholdsWithIndividualsUnder18) {
      consle.log("No child data in ", name);
      return;
    }

    barChartObj.nationalHomesWithKids = 31;  // U.S. national data, 2010

    barChartObj.homesWithKids = Math.round(100 * demogObj.HouseholdsWithIndividualsUnder18 / demogObj.OccupiedHousingUnits); 

    barChartArr[0].push(barChartObj.nationalHomesWithKids);
    barChartArr[1].push(barChartObj.homesWithKids);

    runDrawBar = true;
    // console.log("kid ratio:", barChartObj.homesWithKids);

  }

  //----------------------------------------------------------------------------------
  // Compiles, validates, and maps data for a bar graph from the GeoData Demography data
  // Includes data for median household income;
  let incomeData = function(demogObj, name) {

    if (!demogObj.IncomePerHousehold) {
      consle.log("No median age data in ", name);
      return;
    }

    demographicsObj.income = demogObj.IncomePerHousehold
  }


  //----------------------------------------------------------------------------------
  // Compiles, validates, and maps data for a bar graph from the GeoData Demography data
  // Includes data for median age;
  let ageData = function(demogObj, name) {

    if (!demogObj.MedianAge) {
      consle.log("No median age data in ", name);
      return;
    }

    demographicsObj.age = demogObj.MedianAge;
  }

  //----------------------------------------------------------------------------------
  // Compiles, validates, and maps data for a bar graph from the GeoData Demography data
  // Includes data for median age;
  let housePopulationData = function(demogObj, name) {

    if (!demogObj.PersonsPerHousehold) {
      consle.log("No household population data in ", name);
      return;
    }

    demographicsObj.householdPop = demogObj.PersonsPerHousehold;
  }

  //----------------------------------------------------------------------------------
  // Compiles, validates, and maps data for a bar graph from the GeoData Demography data
  // Includes data for college graduation;
  let bachelorData = function(demogObj, name) {

    if (!demogObj.EducationBachelorOrGreater) {
      consle.log("No Education data in ", name);
      return;
    }

    barChartObj.bachelorDegree = Math.round(100 * demogObj.EducationBachelorOrGreater);

    barChartArr[0].push(barChartObj.nationalBachelorDegree);
    barChartArr[1].push(barChartObj.bachelorDegree);

    runDrawBar = true;
  }

  //----------------------------------------------------------------------------------
  // Compiles, validates, and maps data for a bar graph from the GeoData Demography data
  // Includes data for household family composition;
  let nonFamilyData = function(demogObj, name) {

    if (!demogObj.NonFamilyHouseholds || !demogObj.OccupiedHousingUnits) {
      consle.log("No household data in ", name);
      return;
    }

    barChartObj.nonFamilyHouseholds = Math.round(100 * demogObj.NonFamilyHouseholds / demogObj.OccupiedHousingUnits);

    barChartArr[0].push(barChartObj.nationalNonFamilyHouseholds);
    barChartArr[1].push(barChartObj.nonFamilyHouseholds);

    runDrawBar = true;

  }

  //----------------------------------------------------------------------------------
  // Compiles, validates, and maps data for a bar graph from the Zillow Demography data
  // Includes data for % of homes with children, % of owners (vs renters) and % of single people in each neighborhood

  var chartData = function(obj) {
    runDrawBar = false;
    barChartArr = [[],[]];

    //initializing data that is constant for all neighborhoods
    barChartObj = {
      name: obj.name,
      nationalHomesWithKids: 31, // %
      nationalMedianHouseholdIncome: 44512,  //$
      natinalPersonsPerHousehold: 2.58,  //people
      nationalMedianAge: 37.2,  // years
      nationalBachelorDegree: 33, // %
      nationalNonFamilyHouseholds: 34// %, 39,177,996/116,716,292
    };  // U.S. national data, 2010

    if (obj.demography) {
      childData(obj.demography, obj.name);
      ageData(obj.demography, obj.name);
      bachelorData(obj.demography, obj.name);
      incomeData(obj.demography, obj.name);
      housePopulationData(obj.demography, obj.name);
      nonFamilyData(obj.demography, obj.name)
      // console.log("Finished data mapping")
    }
    return; 
  };

  //----------------------------------------------------------------------------------
  // Draws the bar chart , only drawing columns when data is available for that subject.

  var drawBar = function() {
    // runDrawBar = true; //remove this line when doing the API calls see **
    // console.log("barChartArr", barChartArr)
    // console.log("barChartObj", barChartObj)
    if (runDrawBar){
      $('#percentage-chart').highcharts({
        chart: {
            type: 'column'
        },
        exporting: { enabled: false },
        title: {
            text: barChartObj.name + ' Compared To Nation'
        },
        xAxis: {
            categories: [
                'Households with Kids',
                "Adults with Bachelor's Degrees",
                'Non-Family Households'
            ]
        },
        yAxis: [{
            min: 0,
            max: 100,
            title: {
                text: 'Percentage'
            }
        }],
        legend: {
            shadow: false
        },
        tooltip: {
            shared: true
        },
        plotOptions: {
            column: {
                grouping: false,
                shadow: false,
                borderWidth: 0
            }
        },
        series: [{
            name: 'Nation',
            color: '#CAE0A8',
            data: barChartArr[0],
            // data: [50, 10, 60], //**comment this in and uncomment the previous line to not do API calls
            pointPadding: 0,
            pointPlacement: 0
        }, {
            name: barChartObj.name,
            color: '#3878C7',
            data: barChartArr[1],
            // data: [40, 20, 30], //**comment this in and uncomment the previous line to not do API calls
            pointPadding: 0.2,
            pointPlacement: 0
        }]
      });
    }
  };

  //----------------------------------------------------------------------------------
  // Compiles, validates, and maps data for a pie chart of age distributions in each neighborhood from the Zillow Demography data

  var pieChartData = function(obj) {

    pieChartObj = {};
    runDrawPie = false;

    if (!obj.demography) {
      console.log("no Demography for", obj.name);
      return;
    }

    let demo = obj.demography;
    let totalPopulation = demo.Population;

    // doesn't really help
    // let partToPercent = function(parts) {
    //   return Math.round(100 / totalPopulation * parts.reduce(function(a,b) { return a+b; }));
    // }


    pieChartObj['10-19 years'] = Math.round(100 * (demo.Population10to14 + demo.Population15to19)/totalPopulation);
    pieChartObj['20-29 years'] = Math.round(100 * (demo.Population20to24 + demo.Population25to29)/totalPopulation);
    pieChartObj['30-39 years'] = Math.round(100 * (demo.Population30to34 + demo.Population35to39)/totalPopulation);
    pieChartObj['40-54 years'] = Math.round(100 * (demo.Population40to44 + demo.Population45to49 + demo.Population50to54)/totalPopulation);
    pieChartObj['55-69 years'] = Math.round(100 * (demo.Population55to59 + demo.Population60to64 + demo.Population65to69)/totalPopulation);
    pieChartObj['70+ years'] =  Math.round(100 * (demo.Population70to74 + demo.Population75to79 + demo.Population80to84 + demo.Population85Plus)/totalPopulation);
    pieChartObj['0-9 years'] = 100 - (pieChartObj['10-19 years'] + pieChartObj['20-29 years'] + pieChartObj['30-39 years'] + pieChartObj['40-54 years'] + pieChartObj['55-69 years'] + pieChartObj['70+ years'])


    //basic test to throw out chart if something went horribly wrong with the data set; cannot be true anywhere real
    if (pieChartObj['0-9 years'] < 50) {
      runDrawPie = true;
    }

    // console.log(runDrawPie, "pieChartObj", pieChartObj);

  };

  //----------------------------------------------------------------------------------
  // Draws the Pie chart for age distribution in a given neighborhood


  var drawPie = function() {
    //runDrawPie = true; //uncomment this for testing without calling the APIs see **
    if (runDrawPie) {

      Highcharts.setOptions({
       colors: ['#FA9E25','#A5AAD9', '#FFC735', '#FF7D70', '#CAE0A8', '#5F347C', '#B2D0FF', '#3878C7'],
        chart: {
          style: {
            fontFamily: 'AvenirNextPro'
         }
        }
      });

      $('#pie-chart').highcharts({
          chart: {
              type: 'pie',
              spacingTop: 0
          },
          title: {
            text:   "Resident Age Distribution"
          },
          exporting: { enabled: false },
          tooltip: {
            pointFormat: '<b>{point.percentage:.0f}%</b>'
          },
          plotOptions: {
              pie: {
                  borderWidth: 2,
                  dataLabels: {
                    enabled: true,
                    format: '<b>{point.name}</b>: {point.percentage:.0f}%'
                  }

                  //uncomment to remove the line labels and just use the pie chart legend
                  // showInLegend: true,
                  // dataLabels: {
                  //   enabled: false
                  // }
              },

          },
          series: [{
            name: 'Distribution',
            data: [
              ['0-9 years old',    pieChartObj['0-9 years']],
              ['10-19 years old',    pieChartObj['10-19 years']],
              ['20-29 years old',    pieChartObj['20-29 years']],
              ['30-39 years old',    pieChartObj['30-39 years']],
              ['40-54 years old',    pieChartObj['40-54 years']],
              ['55-69 years old',    pieChartObj['55-69 years']],
              ['70+ years old',    pieChartObj['70+ years']]
            ]
          }]
      });
    }
  };

  var createStrings = function () {
    if (!!demographicsObj.income) {
      demographicsObj.incomeString = parseInt(demographicsObj.income);
    }
    if (!!demographicsObj.age) {
      demographicsObj.ageString = parseInt(demographicsObj.age);
    }
    if (!!demographicsObj.householdPop) {
      demographicsObj.householdPopString = demographicsObj.householdPop.toString();
    }
  };

  var getDemographicsObj = function () {
    return demographicsObj;
  }

  var getFlags = function () {
    return [runDrawBar, runDrawPie];
  }

  return {
    drawBar: drawBar,
    drawPie: drawPie,
    runData: runData,
    // chartData: chartData,
    // pieChartData: pieChartData,
    // createStrings: createStrings,
    getDemographicsObj: getDemographicsObj,
    demographicsObj: demographicsObj,
    clearCharts: clearCharts,
    getFlags: getFlags
  };

});

angular.module('myApp.charts')
.directive('charts', ['Charts', '$timeout', function(Charts, $timeout) {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'app/charts/chartsTemplate.html',
    link: function() {
      $timeout( function(){
        Charts.drawBar();
        Charts.drawPie();
      }, 0);
    }
  };
}]);

var CountUp=function(a,b,c,d,e,f){for(var g=0,h=["webkit","moz","ms","o"],i=0;i<h.length&&!window.requestAnimationFrame;++i)window.requestAnimationFrame=window[h[i]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[h[i]+"CancelAnimationFrame"]||window[h[i]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(a){var c=(new Date).getTime(),d=Math.max(0,16-(c-g)),e=window.setTimeout(function(){a(c+d)},d);return g=c+d,e}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(a){clearTimeout(a)}),this.options={useEasing:!0,useGrouping:!0,separator:",",decimal:"."};for(var j in f)f.hasOwnProperty(j)&&(this.options[j]=f[j]);""===this.options.separator&&(this.options.useGrouping=!1),this.options.prefix||(this.options.prefix=""),this.options.suffix||(this.options.suffix=""),this.d="string"==typeof a?document.getElementById(a):a,this.startVal=Number(b),isNaN(b)&&(this.startVal=Number(b.match(/[\d]+/g).join(""))),this.endVal=Number(c),isNaN(c)&&(this.endVal=Number(c.match(/[\d]+/g).join(""))),this.countDown=this.startVal>this.endVal,this.frameVal=this.startVal,this.decimals=Math.max(0,d||0),this.dec=Math.pow(10,this.decimals),this.duration=1e3*Number(e)||2e3;var k=this;this.version=function(){return"1.5.3"},this.printValue=function(a){var b=isNaN(a)?"--":k.formatNumber(a);"INPUT"==k.d.tagName?this.d.value=b:"text"==k.d.tagName?this.d.textContent=b:this.d.innerHTML=b},this.easeOutExpo=function(a,b,c,d){return 1024*c*(-Math.pow(2,-10*a/d)+1)/1023+b},this.count=function(a){k.startTime||(k.startTime=a),k.timestamp=a;var b=a-k.startTime;k.remaining=k.duration-b,k.frameVal=k.options.useEasing?k.countDown?k.startVal-k.easeOutExpo(b,0,k.startVal-k.endVal,k.duration):k.easeOutExpo(b,k.startVal,k.endVal-k.startVal,k.duration):k.countDown?k.startVal-(k.startVal-k.endVal)*(b/k.duration):k.startVal+(k.endVal-k.startVal)*(b/k.duration),k.frameVal=k.countDown?k.frameVal<k.endVal?k.endVal:k.frameVal:k.frameVal>k.endVal?k.endVal:k.frameVal,k.frameVal=Math.round(k.frameVal*k.dec)/k.dec,k.printValue(k.frameVal),b<k.duration?k.rAF=requestAnimationFrame(k.count):k.callback&&k.callback()},this.start=function(a){return k.callback=a,isNaN(k.endVal)||isNaN(k.startVal)||k.startVal===k.endVal?(console.log("countUp error: startVal or endVal is not a number"),k.printValue(c)):k.rAF=requestAnimationFrame(k.count),!1},this.pauseResume=function(){k.paused?(k.paused=!1,delete k.startTime,k.duration=k.remaining,k.startVal=k.frameVal,requestAnimationFrame(k.count)):(k.paused=!0,cancelAnimationFrame(k.rAF))},this.reset=function(){k.paused=!1,delete k.startTime,k.startVal=b,cancelAnimationFrame(k.rAF),k.printValue(k.startVal)},this.update=function(a){cancelAnimationFrame(k.rAF),k.paused=!1,delete k.startTime,k.startVal=k.frameVal,k.endVal=Number(a),k.countDown=k.startVal>k.endVal,k.rAF=requestAnimationFrame(k.count)},this.formatNumber=function(a){a=a.toFixed(k.decimals),a+="";var b,c,d,e;if(b=a.split("."),c=b[0],d=b.length>1?k.options.decimal+b[1]:"",e=/(\d+)(\d{3})/,k.options.useGrouping)for(;e.test(c);)c=c.replace(e,"$1"+k.options.separator+"$2");return k.options.prefix+c+d+k.options.suffix},k.printValue(k.startVal)};
var team = angular.module('myApp.team', []);

team.directive('team', [function() {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'app/team/teamTemplate.html'
  };
}]);
